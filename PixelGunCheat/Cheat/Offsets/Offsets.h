#pragma once
#include <cstdint>

class Offsets
{
public:
    // Functions
    static inline uint64_t PlayerMoveCUpdate = 0x1b886d0; // 24.6.2 (!! Core Hook !!)      LS: Player_move_c.<Void>Update()
    static inline uint64_t PlayerMoveCFixedUpdate = 0x1ae40a0; // 24.6.2 (!! Core Hook !!) LS: Player_move_c.<Void>FixedUpdate()
    static inline uint64_t WeaponSoundsUpdate = 0x68b6f0; // 24.6.2 (!! Core Hook !!)      LS: WeaponSounds.<Void>Update()
    static inline uint64_t WeaponSoundsLateUpdate = 0x683880; // 24.6.2 (!! Core Hook !!)  LS: WeaponSounds.<Void>LateUpdate()
    static inline uint64_t OnPreRender = 0x42f94d0; // 24.6.2 (!! Core Hook !!)            LS: PostProcessLayer.<Void>OnPreRender()
    static inline uint64_t OnSceneUnload = 0x41751b0; // 24.6.2 (!! Core Hook !!)          LS: UnityDependency.<Void>OnSceneUnloaded(SceneCompat)
    static inline uint64_t SetNextCriticalHit = 0x683d00; // 24.6.2                        LS: WeaponSounds.<Void>SetNextHitCritical(Boolean)
    static inline uint64_t MakeInvisibleForSeconds = 0x1ae48e0; // 24.6.2                  LS: Player_move_c.<Void>MakeInvisibleForSeconds(Single)
    static inline uint64_t InfiniteGemClaim = 0x4ba210; // 24.6.2                          LS: ObfClass14.<Boolean>ObfMethod30(ObfClass5975)
    static inline uint64_t RapidFire = 0x11443c0; // 24.5                                  LS: BalanceController.<Single>ObfMethod100(Int32)
    static inline uint64_t TextMeshGetText = 0x446ef70; // 24.5                            LS: TextMesh.<String>get_text()
    static inline uint64_t BehaviourGetEnabled = 0x4381b40; // 24.5                        LS: Behaviour.<Boolean>get_enabled()
    static inline uint64_t TextMeshGetColor = 0x446ed10; // 24.5                           LS: TextMesh.<Void>get_color_Injected(Color)
    static inline uint64_t WorldToScreenPoint = 0x43612c0; // 24.5                         LS: Camera.<Void>WorldToScreenPoint_Injected(Vector3,MonoOrStereoscopicEye,Vector3)
    static inline uint64_t ComponentGetTransform = 0x4382b60; // 24.5                      LS: Component.<Transform>get_transform()
    static inline uint64_t TransformGetRotation = 0x4397a90; // 24.5                       LS: Transform.<Void>get_rotation_Injected(Quaternion)
    static inline uint64_t TransformGetPosition = 0x4397970; // 24.5                       LS: Transform.<Vector3>get_position()
    static inline uint64_t TransformLookAt = 0x4395a90; // 24.5                            LS: Transform.<Void>Internal_LookAt_Injected(Vector3,Vector3)
    static inline uint64_t PhysicsRayCast = 0x43f52c0; // 24.5                             LS: Physics.<Boolean>Raycast(Ray,RaycastHit,Single)
    static inline uint64_t ObjectGetInstanceID = 0x438a170; // 24.5                        LS: Object.<Int32>GetInstanceID()
    static inline uint64_t PriceModifier = 0x7b4010; // 24.5                               LS: ObfClass2716.<Int32>ObfMethod0()
    static inline uint64_t RewardMultiplier = 0xc637d0; // 24.5                            LS: ObfClass4126.<Int32>ObfMethod9(ObfClass3837)
    static inline uint64_t DoubleRewards = 0xc63fd0; // 24.5                               LS: ObfClass4126.<Boolean>ObfMethod13(ObfClass3837)
    static inline uint64_t PremiumPass = 0x18af410; // 24.5                                LS: ObfClass7446.<Boolean>ObfMethod39()
    static inline uint64_t GetItemRecordDict = 0x7cf590; // 24.5                           LS: ObfClass2719.<Dictionary`2>ObfMethod1()
    static inline uint64_t AddWeapon = 0x662450; // 24.5                                   LS: WeaponManager.<Void>ObfMethod245(String,ObfClass3229,Boolean,Boolean,ObfClass2449,ObfClass6022)
    static inline uint64_t ItemRecordGetShopId = 0x5c7cd0; // 24.5                         LS: ItemRecord.<String>get_ShopId()
    static inline uint64_t GetDamageMultiplier = 0x114dd80; // 24.5                        LS: BalanceController.<Single>ObfMethod92(Int32)
    static inline uint64_t GetPlayerSpeed = 0x114dbe0; // 24.5                             LS: BalanceController.<Single>ObfMethod14(Int32)
    static inline uint64_t GetAmmoInClip = 0x1135bc0; // 24.5                              LS: BalanceController.<Int32>ObfMethod98(Int32)
    static inline uint64_t GetAmmo = 0x1130020; // 24.5                                    LS: BalanceController.<Int32>ObfMethod105(Int32)
    static inline uint64_t PlayerGetImmortality = 0x1b58f30; // 24.5                       LS: Player_move_c.<Boolean>ObfMethod131()
    static inline uint64_t GiveWear = 0x203d410; // 24.5                                   LS: ObfClass1663.<Void>ObfMethod6(String)
    static inline uint64_t GiveWeapon = 0x203dd10; // 24.5                                 LS: ObfClass1663.<Void>ObfMethod8(String,Boolean,Boolean)
    static inline uint64_t GivePets = 0x203aa30; // 24.5                                   LS: ObfClass1663.<Void>ObfMethod10(String,Int32)
    static inline uint64_t GiveGadget = 0x1ecdf10; // 24.5                                 LS: ObfClass1376.<Void>ObfMethod19(String,Int32)
    static inline uint64_t AddGems = 0x2037460; // 24.5                                    LS: ObfClass1654.<Void>ObfMethod20(Int32,Boolean,Boolean,ObfClass3949,ObfClass3221,ObfClass3222)
    static inline uint64_t AddCoins = 0x2038900; // 24.5                                   LS: ObfClass1654.<Void>ObfMethod19(Int32,Boolean,Boolean,ObfClass3949,ObfClass3221,ObfClass3222)
    static inline uint64_t AddSomeCurrency = 0x20368f0; // 24.5                            LS: ObfClass1654.<Void>ObfMethod18(String,Int32,Boolean,ObfClass3949,ObfClass3221,ObfClass3222,ObfClass3251)
    static inline uint64_t AddCoupons = 0x2057cc0; // 24.3.11                              LS: (Presumably no longer needed, cannot update currently, no old dump!)
    static inline uint64_t AddClanChestPoints = 0x20359c0; // 24.5                         LS: ObfClass1654.<Boolean>ObfMethod35(Int32,ObfClass3221,Boolean,ObfClass3949)
    static inline uint64_t ProgressUpdaterGetInstance = 0xa0f530; // 24.5                  LS: ObfClass3248.<ObfClass3248>ObfMethod88()
    static inline uint64_t ProgressAddCurrency = 0xa1cad0; // 24.5                         LS: ObfClass3248.<Void>ObfMethod143(String,Int32,ObfClass3221,Boolean,Boolean,ObfClass6022)
    static inline uint64_t GetWeaponSkinSettings = 0x924410; // 24.5                       LS: ObfClass2896.<WeaponSkinSettings>ObfMethod0(String)
    static inline uint64_t GetIDListParentInstance = 0x13f5630; // 24.5                    LS: ObfClass5882.<ObfClass5882>ObfMethod71()
    static inline uint64_t GetIDList = 0x1470450; // 24.5                                  LS: ObfClass5882.<List`1>ObfMethod83(OfferItemType)
    static inline uint64_t GadgetActivate = 0x1b03830; // 24.5                             LS: Player_move_c.<Void>ObfMethod545(ObfClass629,String,Int32)
    static inline uint64_t GadgetDeactivate = 0x1b44d80; // 24.5                           LS: Player_move_c.<Void>ObfMethod546(ObfClass629)
    static inline uint64_t SpoofModuleLevel = 0x1552270; // 24.5                           LS: ObfClass5946.<Int32>ObfMethod5()
    static inline uint64_t ModulePerkDuration = 0x1ed7b80; // 24.5                         LS: ObfClass1379.<Single>ObfMethod27()
    static inline uint64_t ThrowGadgetDamage = 0x1ed7b70; // 24.5                          LS: ObfClass1379.<Single>ObfMethod35(PhotonView)
    static inline uint64_t GadgetDuration = 0x1ed7ea0; // 24.5                             LS: ObfClass1379.<Single>ObfMethod38()
    static inline uint64_t GadgetCooldown = 0x1ed7870; // 24.5                             LS: ObfClass1379.<Single>ObfMethod39()
    static inline uint64_t TeamKill = 0x1acc4e0; // 24.5                                   LS: PlayerDamageable.<Boolean>IsEnemyTo(Player_move_c)
    static inline uint64_t LotteryDropCount = 0xb777b0; // 24.5                            LS: GameEventItemData.<Int32>get_Count()
    static inline uint64_t LotteryDropId = 0xb778b0; // 24.5                               LS: GameEventItemData.<String>get_Id()
    static inline uint64_t LotteryDropType = 0xb77900; // 24.5                             LS: GameEventItemData.<GameEventItemType>get_Type()
    static inline uint64_t WeaponSetSkin = 0x8ff7c0; // 24.4                               (Useless, only for overriding prefab)
    static inline uint64_t ForceItemDisplay = 0x147b740; // 24.5                           LS: ObfClass5882.<Int32>ObfMethod78(OfferItemType,String)
    static inline uint64_t SendChat = 0x1aed900; // 24.5                                   LS: Player_move_c.<Void>SendChat(String,Boolean,String)
    static inline uint64_t CameraGetMain = 0x4361a00; // 24.5                              LS: Camera.<Camera>get_main()
    static inline uint64_t CameraGetCurrent = 0x4361890; // 24.5                           LS: Camera.<Camera>get_current()
    static inline uint64_t CameraSetFieldOfView = 0x43622e0; // 24.5                       LS: Camera.<Void>set_fieldOfView(Single)
    static inline uint64_t ProtonOnDisconnect = 0x9e4d30; // 24.5                          LS: GameConnect.<Void>OnConnectionFail(DisconnectCause)
    static inline uint64_t ProtonOnDisconnect2 = 0x1eff420; // 24.5                        LS: InGameConnection.<Void>OnConnectionFail(Int32)
    
    // Fields
    static inline uint64_t weaponSubData = 0x48;
    static inline uint64_t scopeSpeed = 0x100; // move to weaponSubData
    static inline uint64_t zoomXray = 0xc5;
    static inline uint64_t bulletBreakout = 0x194;
    static inline uint64_t bulletSuperBreakout = 0x197;
    static inline uint64_t railgunStopAtWall = 0x1b8;
    static inline uint64_t shootDelay = 0x1a0;
    static inline uint64_t bulletDelay = 0x19c;
    static inline uint64_t delayInBurstShooting = 0x5f8; // move to weaponSubData
    static inline uint64_t isSectorsAOE = 0x3b0;
    static inline uint64_t flamethrower = 0x33c;
    static inline uint64_t railgun = 0x1ac;
    static inline uint64_t bazooka = 0x127;
    static inline uint64_t harpoon = 0x2a8;
    static inline uint64_t sectorsAOEAngleFront = 0x3b4;
    static inline uint64_t sectorsAOEAngleBack = 0x3b8;
    static inline uint64_t sectorsAOEDamageMultiplierFront = 0x3bc;
    static inline uint64_t sectorsAOEDamageMultiplierSide = 0x3c0;
    static inline uint64_t sectorsAOEDamageMultiplierBack = 0x3c4;
    static inline uint64_t sectorsAOERadiusSectorsAoE = 0x3c8;
    static inline uint64_t isCharm = 0x264;
    static inline uint64_t charmTime = 0x268;
    static inline uint64_t isCursing = 0x204;
    static inline uint64_t curseTime = 0x208;
    static inline uint64_t curseDamageMultiplier = 0x20c;
    static inline uint64_t isLightning = 0x14d;
    static inline uint64_t isPoisoning = 0x1e8;
    static inline uint64_t poisonCount = 0x1ec;
    static inline uint64_t poisonDamageMultiplier = 0x1f0;
    static inline uint64_t poisonTime = 0x1f4;
    static inline uint64_t isStun = 0x228;
    static inline uint64_t stunCoeff = 0x22c;
    static inline uint64_t stunTime = 0x230;
    static inline uint64_t stunRadius = 0x234;
    static inline uint64_t isBlindEffect = 0x258;
    static inline uint64_t blindEffect = 0x25c;
    static inline uint64_t isBlindEffectTime = 0x260;
    static inline uint64_t isSlowdown = 0x214;
    static inline uint64_t slowdownCoeff = 0x218;
    static inline uint64_t slowdownTime = 0x21c;
    static inline uint64_t isSlowdownStack = 0x220;
    static inline uint64_t firstKillCritical = 0x378;
    static inline uint64_t isInvisibleAfterRespawn = 0x379;
    static inline uint64_t invisibleAfterRespawnTime = 0x37c;
    static inline uint64_t isFrostSword = 0x359;
    static inline uint64_t isFrostSwordUseAngle = 0x364;
    static inline uint64_t frostRadius = 0x360;
    static inline uint64_t frostDamageMultiplier = 0x35c;
    static inline uint64_t frostSwordAngle = 0x368;
    static inline uint64_t frostSwordnTime = 0x36c;
    static inline uint64_t range = 0x678; // move to weaponSubData
    static inline uint64_t recoilCoeff = 0xC8; // move to weaponSubData
    static inline uint64_t recoilCoeffZoom = 0x120;
    
    static inline uint64_t firstShotScatter = 0xb4;
    static inline uint64_t moveScatterCoeff = 0xbc;
    static inline uint64_t instantHorizontalMoveScatterCoeff = 0xc0;
    static inline uint64_t instantVerticalMoveScatterCoeff = 0xc1;
    static inline uint64_t scatterInversion = 0xc2;
    static inline uint64_t enableRocketScatter = 0xc3;

    static inline uint64_t firstShotScatterZoom = 0x114;
    static inline uint64_t moveScatterCoeffZoom = 0x118;
    static inline uint64_t instantHorizontalMoveScatterCoeffZoom = 0x11c;
    static inline uint64_t instantVerticalMoveScatterCoeffZoom = 0x11d;
    static inline uint64_t scatterInversionZoom = 0x11e;
    
    static inline uint64_t fieldOfViewZomm = 0xd8;
    static inline uint64_t scopeCircleRadius = 0xe0;
    static inline uint64_t scopeMovementSpeed = 0xe8;
    static inline uint64_t buffPointsKillDesigner = 0x394;
    static inline uint64_t buffPointsAssistDesigner = 0x39c;
    static inline uint64_t buffPointsRevengeDesigner = 0x38c;
    static inline uint64_t buffPointsOther = 0x3a0;
    static inline uint64_t buffBonusPointsForKill = 0x390;
    static inline uint64_t buffBonusPointsForAssist = 0x398;
    static inline uint64_t buffPointsRevenge = 0x388;
    static inline uint64_t isBuffPoints = 0x384;
    static inline uint64_t chargeTime = 0x1d4;
    static inline uint64_t chargeMax = 0x1d0;
    static inline uint64_t chargeLoop = 0x1c8;
    static inline uint64_t isCharging = 0x1ba;
    static inline uint64_t isHeadshotDamageIncreased = 0x274;
    static inline uint64_t increasedHeadshotDamageMultiplier = 0x278;
    static inline uint64_t isReducedHeadshotDamage = 0x27c;
    static inline uint64_t reducedHeadshotDamageMultiplier = 0x280;
    static inline uint64_t isDoubleJump = 0x467;
    static inline uint64_t isDash = 0x298;
    static inline uint64_t dashMaxImpulse = 0x29c;
    static inline uint64_t dashDecaySpeed = 0x2a0;
    static inline uint64_t dashDeltaImpact = 0x2a4;
    static inline uint64_t playerMoveCPlayerDamageable = 0x660;
    static inline uint64_t nickLabel = 0x3c8;
    static inline uint64_t weaponSoundsPlayerMoveC = 0x4f0; // private Player_move_c, not a private WeaponSounds !
    static inline uint64_t myPlayerTransform = 0x3b0;
    static inline uint64_t headCollider = 0x128;
    static inline uint64_t maxKoofZoom = 0x100;
    static inline uint64_t upKoofFireZoom = 0x104;
    static inline uint64_t downKoofFirstZoom = 0x108;
    static inline uint64_t downKoofZoom = 0x10c;
    static inline uint64_t maxKoof = 0x94; // move to weaponSubData
    static inline uint64_t tekKoof = 0x94;
    static inline uint64_t upKoofFire = 0x98;
    static inline uint64_t downKoofFirst = 0x9c;
    static inline uint64_t downKoof = 0xa0;
    static inline uint64_t ignoreBarrier = 0x124;
    static inline uint64_t ignoreSlyWolf = 0x125;
    static inline uint64_t ignoreReflector = 0x126;
    static inline uint64_t fireImmunity = 0x238;
    static inline uint64_t bleedingImmunity = 0x239;
    static inline uint64_t toxicImmunity = 0x23a;
};
